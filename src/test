import { useEffect, useRef } from 'react';
import { signOut } from 'next-auth/react';
import { useRouter } from 'next/navigation';

interface UseIdleTimeoutProps {
  timeoutMs: number;
}

export function useIdleTimeout({ timeoutMs }: UseIdleTimeoutProps): void {
  const router = useRouter();
  const timeoutRef = useRef<NodeJS.Timeout | null>(null);

  useEffect(() => {
    const handleTimeout = async (): Promise<void> => {
      await signOut({ redirect: false });
      router.push('/login');
    };

    const resetTimer = (): void => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
      timeoutRef.current = setTimeout(handleTimeout, timeoutMs);
    };

    // Activity events including wheel for mouse wheel scrolling
    const events: string[] = [
      'mousedown',
      'keydown',
      'scroll',
      'touchstart',
      'click',
      'wheel'
    ];

    // Add listeners
    events.forEach((event: string) => {
      window.addEventListener(event, resetTimer, { passive: true });
    });

    // Start timer
    resetTimer();

    // Cleanup
    return (): void => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
      events.forEach((event: string) => {
        window.removeEventListener(event, resetTimer);
      });
    };
  }, [timeoutMs, router]);
}

interface IdleTimeoutProviderProps {
  children: React.ReactNode;
}

export function IdleTimeoutProvider({ children }: IdleTimeoutProviderProps): JSX.Element {
  // Get timeout from environment variable (in milliseconds)
  const timeoutMs: number = Number(process.env.NEXT_PUBLIC_IDLE_TIMEOUT_MS) || 300000;

  useIdleTimeout({ timeoutMs });
  
  return <>{children}</>;
}
