import { useEffect, useRef } from 'react';

export function useWhyDidYouUpdate<T extends Record<string, any>>(
  label: string,
  value: T | undefined | null
) {
  const prevRef = useRef<T | undefined | null>(undefined);

  useEffect(() => {
    const prev = prevRef.current ?? {};
    const next = value ?? {};
    const keys = new Set([...Object.keys(prev as any), ...Object.keys(next as any)]);
    const changes: Record<string, { from: any; to: any }> = {};

    keys.forEach((k) => {
      const a = (prev as any)[k] instanceof Date ? (prev as any)[k].getTime() : (prev as any)[k];
      const b = (next as any)[k] instanceof Date ? (next as any)[k].getTime() : (next as any)[k];
      if (!Object.is(a, b)) changes[k] = { from: a, to: b };
    });

    if (Object.keys(changes).length === 0 && prevRef.current !== value) {
      // ref changed but shallowly equal — likely a spread/clone
      // useful to catch “{...proposal}” recreations
      // eslint-disable-next-line no-console
      console.log(`[${label}] ref changed but shallowly equal`);
    } else if (Object.keys(changes).length) {
      // eslint-disable-next-line no-console
      console.table(changes);
    }

    prevRef.current = value;
  }, [label, value]);
}
